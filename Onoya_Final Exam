import java.util.Stack;

class Creatures {

    // Creature class to store the name and power level
    static class Creature {
        String name;
        int powerLevel;

        // Parameterized Constructor
        public Creature(String name, int powerLevel) {
            this.name = name; // differentiates instance variable from parameter
            this.powerLevel = powerLevel;
        }

        // Prompt a method to display the creature's details
        public String toString() {
            return name + " - " + powerLevel;
        }
    }

    // Prompt a method to sort the array of creatures in Descending Order using Bubble Sort
    public static void bubbleSort(Creature[] creatures) {
        int n = creatures.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (creatures[j].powerLevel < creatures[j + 1].powerLevel) {
                    // Swap the creatures if they are in the wrong order
                    Creature temp = creatures[j];
                    creatures[j] = creatures[j + 1];
                    creatures[j + 1] = temp;
                }
            }
        }
    }

    // Prompt a method to sort the array of creatures in Ascending Order using Selection Sort
    public static void selectionSort(Creature[] creatures) {
        int n = creatures.length;
        for (int i = 0; i < n - 1; i++) {
            int minInd = i; // Index of the smallest element
            for (int j = i + 1; j < n; j++) {
                if (creatures[j].powerLevel < creatures[minInd].powerLevel) {
                    minInd = j; // This update the index of the smallest element
                }
            }
            // Swap the smallest creature with the current creature
            Creature temp = creatures[minInd];
            creatures[minInd] = creatures[i];
            creatures[i] = temp;
        }
    }
    
    // To display creatures in reverse order using stack
    public static void useStack(Creature[] creatures) {
        Stack<Creature> stack = new Stack<>();

        // Pushing all the creatures into the stack
        for (Creature creature : creatures) {
            stack.push(creature);
        }

        // Pop creatures from stack and display them
        System.out.println("\n*** Stack Implementation: Popping Creatures ***");
        while (!stack.isEmpty()) {
            System.out.println("Popped: " + stack.pop());
        }
    }

    // Main method
    public static void main(String[] args) {
        // Array of creatures
        Creature[] creatures = {
            new Creature("Dragon", 95),
            new Creature("Griffin", 88),
            new Creature("Unicorn", 78),
            new Creature("Phoenix", 92),
            new Creature("Centaur", 85) };

        // Sorts the creatures in Descending Order
        Creature[] bubbleSortCreatures = creatures.clone();
        bubbleSort(bubbleSortCreatures);
        System.out.println("*** Bubble Sort: Descending Order by Power Level ***");
        for (Creature creature : bubbleSortCreatures) {
            System.out.println(creature);
        }

        // Sorts the creatures in Ascending Order
        Creature[] selectionSortCreatures = creatures.clone();
        selectionSort(selectionSortCreatures);
        System.out.println("\n*** Selection Sort: Ascending Order by Power Level ***");
        for (Creature creature : selectionSortCreatures) {
            System.out.println(creature);
        }

        // To display creatures in Descending Order using stack 
        useStack(selectionSortCreatures);
    }
}
